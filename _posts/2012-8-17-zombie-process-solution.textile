---
layout: post
title: Zombie进程的几种解决方法
---

p. 在unix和类unix系统中, 僵尸进程是指已经完成工作但是依然存有进程实例存在于进程表中的进程. 这个实例仍然需要父进程去读取它的退出状态(exit status). 通常来说, 僵尸进程并不像普通进程那样, 能够被kill命令所杀死.  --- 渣翻译, 出自 <a herf='http://en.wikipedia.org/wiki/Zombie_process'>http://en.wikipedia.org/wiki/Zombie_process</a>

p. 既然我们要处理僵尸进程, 那么我们就首先写一个僵尸进程的程序:

<pre>#!/usr/bin/env python

import os
import time

if __name__ == '__main__':
   while True:
      pid = os.fork()
      if pid == 0:
      	 // do smth.
      	 exit(0)
      time.sleep(1)</pre>

p. 通过上面的程序, 可以稳定地, 每秒产生1个僵尸进程.(别担心, 它们不会咬人)

p. 上面的程序中, 在fork了之后, 子进程退出, 而父进程依然他的工作. 但是父进程并没有对子进程的退出状态作处理, 最后导致的是子进程无法退出.

p. 下面来讲解一下几个解决方案:

h3. 1. 父进程中调用wait等待子进程退出.

<pre>#!/usr/bin/env python

import os
import time

if __name__ == '__main__':
   while True:
      pid = os.fork()
      if pid == 0:
      	 // do smth.
      	 exit(0)
      os.wait()
      // os.waitpid(pid, 0)
      time.sleep(1)</pre>

p. 这种方法虽然是可行的,但是他会阻塞了父进程的工作.

h3. 2.

<pre>#!/usr/bin/env python

import os
import time
import signal

if __name__ == '__main__':
   signal.signal(signal.SIGCHLD, signal.SIG_IGN)
   while True:
      pid = os.fork()
      if pid == 0:
      	 // do smth.
      	 exit(0)
      time.sleep(1)</pre>

p. 在父进程忽略了子进程发出的SIGCHLD信号.
或者也可以自己定义一个信号处理的函数

h3. 3.

<pre>#!/usr/bin/env python

import os
import time
import signal

if __name__ == '__main__':
   while True:
      pid = os.fork()
      if pid != 0:
      	 // do smth.
      	 exit(0)
      time.sleep(1)</pre>

p. 这种方法是我自创的. =m=
既然子进程要做完事要通知父进程,这么麻烦,那么我就干脆让父进程做事.子进程负责fork算了.

p. 好吧, 讲完了.
